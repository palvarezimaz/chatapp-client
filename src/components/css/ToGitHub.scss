$strings: (
  'Proof of concept: Chat App' 'Powered by Socket.io-React'
    ' 2022 Pablo Alvarez Imaz'
);

$durCharFwd: 0.1;
$durFullGap: 2;
$durCharBwd: 0.08;
$durDoneGap: 1;

$charCount: 0;
$durTotal: 0;
@each $string in $strings {
  $charCount: $charCount + str-length($string);
  $durTotal: $durTotal +
    (str-length($string) * ($durCharFwd + $durCharBwd)) +
    $durFullGap +
    $durDoneGap;
}
@function percent($string, $letter, $modifier) {
  $stringsPast: $string - 1;
  $time: 0;
  @while $stringsPast > 0 {
    $time: $time +
      (
        ($durCharFwd + $durCharBwd) * (str-length(nth($strings, $stringsPast)))
      ) +
      $durFullGap +
      $durDoneGap;
    $stringsPast: $stringsPast - 1;
  }
  @if $letter <= str-length(nth($strings, $string)) {
    $time: $time + ($durCharFwd * ($letter - 1));
  } @else {
    $time: $time +
      ($durCharFwd * str-length(nth($strings, $string))) +
      $durFullGap +
      ($durCharBwd * ($letter - str-length(nth($strings, $string))));
  }
  @return ($time / $durTotal * 100 + $modifier) + '%';
}
$currentPercentage: 0;

@keyframes typed {
  @for $i from 1 through length($strings) {
    @for $j from 1 through (str-length(nth($strings, $i)) * 2) {
      @if $j < str-length(nth($strings, $i)) * 2 {
        #{percent($i, $j, 0)},
        #{percent($i, $j+1, -0.001)} {
          @if $j <= str-length(nth($strings, $i)) {
            content: quote(#{str_slice(nth($strings, $i), 1, $j)});
          } @else {
            content: quote(
              #{str_slice(
                  nth($strings, $i),
                  1,
                  str-length(nth($strings, $i)) -
                    ($j - str-length(nth($strings, $i)))
                )}
            );
          }
        }
      } @else {
        @if $i < length($strings) {
          #{percent($i, $j, 0)},
          #{percent($i+1, 1, -0.001)} {
            content: '​';
          }
        } @else {
          // last string
          #{percent($i, $j, 0)},
          100% {
            content: '​';
          }
        }
      }
    }
  }
}
@keyframes beam-blink {
  75% {
    border-color: transparent;
  }
}
* {
  backface-visibility: hidden;
}

.ToGitHub {
  margin: 0 auto;
}
.Disclaimer {
  position: fixed;
  bottom: 15%;
  width: 100%;
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #000;
  font-family: 'VT323', monospace, sans-serif;
  color: rgba(153, 226, 153, 0.927);
  // rgb(127, 224, 127);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  &::after {
    content: '​';
    position: relative;
    top: -13px;
    @media (max-width: 575px) {
      top: -33px;
    }
    display: inline-block;
    padding-right: 3px;
    padding-right: calc(3px + 0.1vw);
    border-right: 10px solid rgba(#3f3, 0.75);
    border-right: calc(1.1vw + 4px) solid rgba(#3f3, 0.75);
    text-shadow: 0 0 5px rgba(51, 255, 51, 0.75);
    white-space: nowrap;
    animation: typed #{$durTotal + 's'} linear 1s infinite,
      beam-blink 1s infinite;
  }
}

a {
  position: fixed;
  margin-top: 40px;
  bottom: 10%;
  width: 100%;
  text-align: center;
  animation: slide-in-git-hub 2.5s forwards;
  // animation-delay: 200ms;
}

@keyframes slide-in-git-hub {
  20% {
    opacity: 0;
  }
  100% {
    opacity: 1;
    transform: translateY(-40%);
  }
}
